/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Products API
 * This is a sample API for a products catalog.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8000".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ApiLoginBody
 */
export interface ApiLoginBody {
    /**
     * The Email of the user.
     * @type {string}
     * @memberof ApiLoginBody
     */
    email: string;
    /**
     * The password of the user.
     * @type {string}
     * @memberof ApiLoginBody
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ApiProductsBody
 */
export interface ApiProductsBody {
    /**
     * The name of the product. Must not be greater than 255 characters.
     * @type {string}
     * @memberof ApiProductsBody
     */
    name: string;
    /**
     * The description of the product.
     * @type {string}
     * @memberof ApiProductsBody
     */
    description?: string;
    /**
     * The price of the product.
     * @type {string}
     * @memberof ApiProductsBody
     */
    price: string;
    /**
     * The status of the product.
     * @type {boolean}
     * @memberof ApiProductsBody
     */
    isActive?: boolean;
    /**
     * The Cover Image.
     * @type {Blob}
     * @memberof ApiProductsBody
     */
    coverImage: Blob;
}
/**
 * 
 * @export
 * @interface ApiRegisterBody
 */
export interface ApiRegisterBody {
    /**
     * The name of the user.
     * @type {string}
     * @memberof ApiRegisterBody
     */
    name: string;
    /**
     * The Email of the user.
     * @type {string}
     * @memberof ApiRegisterBody
     */
    email: string;
    /**
     * The password of the user.
     * @type {string}
     * @memberof ApiRegisterBody
     */
    password: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    accessToken?: string;
    /**
     * 
     * @type {InlineResponse200User}
     * @memberof InlineResponse200
     */
    user?: InlineResponse200User;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    emailVerifiedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    status?: string;
    /**
     * 
     * @type {InlineResponse2002Services}
     * @memberof InlineResponse2002
     */
    services?: InlineResponse2002Services;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Services
 */
export interface InlineResponse2002Services {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Services
     */
    database?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Services
     */
    redis?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<InlineResponse2003Data>}
     * @memberof InlineResponse2003
     */
    data?: Array<InlineResponse2003Data>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Data
 */
export interface InlineResponse2003Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    description?: string;
    /**
     * 
     * @type {InlineResponse2003Price}
     * @memberof InlineResponse2003Data
     */
    price?: InlineResponse2003Price;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    coverImage?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Price
 */
export interface InlineResponse2003Price {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Price
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Price
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Price
     */
    formatted?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {InlineResponse2003Data}
     * @memberof InlineResponse2004
     */
    data?: InlineResponse2003Data;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {InlineResponse2005Data}
     * @memberof InlineResponse2005
     */
    data?: InlineResponse2005Data;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Data
 */
export interface InlineResponse2005Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Data
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    description?: string;
    /**
     * 
     * @type {InlineResponse2005DataPrice}
     * @memberof InlineResponse2005Data
     */
    price?: InlineResponse2005DataPrice;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    coverImage?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005DataPrice
 */
export interface InlineResponse2005DataPrice {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005DataPrice
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005DataPrice
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005DataPrice
     */
    formatted?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200User
 */
export interface InlineResponse200User {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200User
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200User
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse422
 */
export interface InlineResponse422 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse422
     */
    message?: string;
    /**
     * 
     * @type {InlineResponse422Errors}
     * @memberof InlineResponse422
     */
    errors?: InlineResponse422Errors;
}
/**
 * 
 * @export
 * @interface InlineResponse4221
 */
export interface InlineResponse4221 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse4221
     */
    message?: string;
    /**
     * 
     * @type {InlineResponse4221Errors}
     * @memberof InlineResponse4221
     */
    errors?: InlineResponse4221Errors;
}
/**
 * 
 * @export
 * @interface InlineResponse4221Errors
 */
export interface InlineResponse4221Errors {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse4221Errors
     */
    coverImage?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse422Errors
 */
export interface InlineResponse422Errors {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse422Errors
     */
    email?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductsIdBody
 */
export interface ProductsIdBody {
    /**
     * The name of the product. Must not be greater than 255 characters.
     * @type {string}
     * @memberof ProductsIdBody
     */
    name: string;
    /**
     * The description of the product.
     * @type {string}
     * @memberof ProductsIdBody
     */
    description?: string;
    /**
     * The price of the product.
     * @type {string}
     * @memberof ProductsIdBody
     */
    price: string;
    /**
     * The status of the product.
     * @type {boolean}
     * @memberof ProductsIdBody
     */
    isActive?: boolean;
    /**
     * The cover image of the product.
     * @type {string}
     * @memberof ProductsIdBody
     */
    coverImage?: string;
}
/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login the user
         * @param {ApiLoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTheUser(body: ApiLoginBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loginTheUser.');
            }
            const localVarPath = `/api/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApiLoginBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTheUser(options: any = {}): FetchArgs {
            const localVarPath = `/api/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a user
         * @param {ApiRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAUser(body: ApiRegisterBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerAUser.');
            }
            const localVarPath = `/api/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApiRegisterBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login the user
         * @param {ApiLoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTheUser(body: ApiLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).loginTheUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Logout the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTheUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).logoutTheUser(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Register a user
         * @param {ApiRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAUser(body: ApiRegisterBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).registerAUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Login the user
         * @param {ApiLoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTheUser(body: ApiLoginBody, options?: any) {
            return AuthenticationApiFp(configuration).loginTheUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Logout the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTheUser(options?: any) {
            return AuthenticationApiFp(configuration).logoutTheUser(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Register a user
         * @param {ApiRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAUser(body: ApiRegisterBody, options?: any) {
            return AuthenticationApiFp(configuration).registerAUser(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Login the user
     * @param {ApiLoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public loginTheUser(body: ApiLoginBody, options?: any) {
        return AuthenticationApiFp(this.configuration).loginTheUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Logout the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logoutTheUser(options?: any) {
        return AuthenticationApiFp(this.configuration).logoutTheUser(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Register a user
     * @param {ApiRegisterBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerAUser(body: ApiRegisterBody, options?: any) {
        return AuthenticationApiFp(this.configuration).registerAUser(body, options)(this.fetch, this.basePath);
    }

}
/**
 * EndpointsApi - fetch parameter creator
 * @export
 */
export const EndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUser(options: any = {}): FetchArgs {
            const localVarPath = `/api/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointsApi - functional programming interface
 * @export
 */
export const EndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = EndpointsApiFetchParamCreator(configuration).getApiUser(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EndpointsApi - factory interface
 * @export
 */
export const EndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUser(options?: any) {
            return EndpointsApiFp(configuration).getApiUser(options)(fetch, basePath);
        },
    };
};

/**
 * EndpointsApi - object-oriented interface
 * @export
 * @class EndpointsApi
 * @extends {BaseAPI}
 */
export class EndpointsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    public getApiUser(options?: any) {
        return EndpointsApiFp(this.configuration).getApiUser(options)(this.fetch, this.basePath);
    }

}
/**
 * HealthChecksApi - fetch parameter creator
 * @export
 */
export const HealthChecksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiHealthCheck(options: any = {}): FetchArgs {
            const localVarPath = `/api/health-check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthChecksApi - functional programming interface
 * @export
 */
export const HealthChecksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiHealthCheck(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = HealthChecksApiFetchParamCreator(configuration).getApiHealthCheck(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HealthChecksApi - factory interface
 * @export
 */
export const HealthChecksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiHealthCheck(options?: any) {
            return HealthChecksApiFp(configuration).getApiHealthCheck(options)(fetch, basePath);
        },
    };
};

/**
 * HealthChecksApi - object-oriented interface
 * @export
 * @class HealthChecksApi
 * @extends {BaseAPI}
 */
export class HealthChecksApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public getApiHealthCheck(options?: any) {
        return HealthChecksApiFp(this.configuration).getApiHealthCheck(options)(this.fetch, this.basePath);
    }

}
/**
 * ProductsApi - fetch parameter creator
 * @export
 */
export const ProductsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Display a listing of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayAListingOfTheResource(options: any = {}): FetchArgs {
            const localVarPath = `/api/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Display the specified resource.
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayTheSpecifiedResource(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling displayTheSpecifiedResource.');
            }
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove the specified resource from storage.
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTheSpecifiedResourceFromStorage(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeTheSpecifiedResourceFromStorage.');
            }
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Store a newly created resource in storage.
         * @param {string} name 
         * @param {string} description 
         * @param {string} price 
         * @param {boolean} isActive 
         * @param {Blob} coverImage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeANewlyCreatedResourceInStorage(name: string, description: string, price: string, isActive: boolean, coverImage: Blob, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling storeANewlyCreatedResourceInStorage.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling storeANewlyCreatedResourceInStorage.');
            }
            // verify required parameter 'price' is not null or undefined
            if (price === null || price === undefined) {
                throw new RequiredError('price','Required parameter price was null or undefined when calling storeANewlyCreatedResourceInStorage.');
            }
            // verify required parameter 'isActive' is not null or undefined
            if (isActive === null || isActive === undefined) {
                throw new RequiredError('isActive','Required parameter isActive was null or undefined when calling storeANewlyCreatedResourceInStorage.');
            }
            // verify required parameter 'coverImage' is not null or undefined
            if (coverImage === null || coverImage === undefined) {
                throw new RequiredError('coverImage','Required parameter coverImage was null or undefined when calling storeANewlyCreatedResourceInStorage.');
            }
            const localVarPath = `/api/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication default required

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            if (description !== undefined) {
                localVarFormParams.set('description', description as any);
            }

            if (price !== undefined) {
                localVarFormParams.set('price', price as any);
            }

            if (isActive !== undefined) {
                localVarFormParams.set('is_active', isActive as any);
            }

            if (coverImage !== undefined) {
                localVarFormParams.set('cover_image', coverImage as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the specified resource in storage.
         * @param {ProductsIdBody} body 
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTheSpecifiedResourceInStorage(body: ProductsIdBody, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTheSpecifiedResourceInStorage.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTheSpecifiedResourceInStorage.');
            }
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProductsIdBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Display a listing of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayAListingOfTheResource(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2003> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).displayAListingOfTheResource(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Display the specified resource.
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayTheSpecifiedResource(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2004> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).displayTheSpecifiedResource(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove the specified resource from storage.
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTheSpecifiedResourceFromStorage(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).removeTheSpecifiedResourceFromStorage(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Store a newly created resource in storage.
         * @param {string} name 
         * @param {string} description 
         * @param {string} price 
         * @param {boolean} isActive 
         * @param {Blob} coverImage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeANewlyCreatedResourceInStorage(name: string, description: string, price: string, isActive: boolean, coverImage: Blob, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).storeANewlyCreatedResourceInStorage(name, description, price, isActive, coverImage, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update the specified resource in storage.
         * @param {ProductsIdBody} body 
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTheSpecifiedResourceInStorage(body: ProductsIdBody, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2005> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).updateTheSpecifiedResourceInStorage(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Display a listing of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayAListingOfTheResource(options?: any) {
            return ProductsApiFp(configuration).displayAListingOfTheResource(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Display the specified resource.
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayTheSpecifiedResource(id: number, options?: any) {
            return ProductsApiFp(configuration).displayTheSpecifiedResource(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove the specified resource from storage.
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTheSpecifiedResourceFromStorage(id: number, options?: any) {
            return ProductsApiFp(configuration).removeTheSpecifiedResourceFromStorage(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Store a newly created resource in storage.
         * @param {string} name 
         * @param {string} description 
         * @param {string} price 
         * @param {boolean} isActive 
         * @param {Blob} coverImage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeANewlyCreatedResourceInStorage(name: string, description: string, price: string, isActive: boolean, coverImage: Blob, options?: any) {
            return ProductsApiFp(configuration).storeANewlyCreatedResourceInStorage(name, description, price, isActive, coverImage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update the specified resource in storage.
         * @param {ProductsIdBody} body 
         * @param {number} id The ID of the product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTheSpecifiedResourceInStorage(body: ProductsIdBody, id: number, options?: any) {
            return ProductsApiFp(configuration).updateTheSpecifiedResourceInStorage(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @summary Display a listing of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public displayAListingOfTheResource(options?: any) {
        return ProductsApiFp(this.configuration).displayAListingOfTheResource(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Display the specified resource.
     * @param {number} id The ID of the product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public displayTheSpecifiedResource(id: number, options?: any) {
        return ProductsApiFp(this.configuration).displayTheSpecifiedResource(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove the specified resource from storage.
     * @param {number} id The ID of the product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public removeTheSpecifiedResourceFromStorage(id: number, options?: any) {
        return ProductsApiFp(this.configuration).removeTheSpecifiedResourceFromStorage(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Store a newly created resource in storage.
     * @param {string} name 
     * @param {string} description 
     * @param {string} price 
     * @param {boolean} isActive 
     * @param {Blob} coverImage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public storeANewlyCreatedResourceInStorage(name: string, description: string, price: string, isActive: boolean, coverImage: Blob, options?: any) {
        return ProductsApiFp(this.configuration).storeANewlyCreatedResourceInStorage(name, description, price, isActive, coverImage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update the specified resource in storage.
     * @param {ProductsIdBody} body 
     * @param {number} id The ID of the product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateTheSpecifiedResourceInStorage(body: ProductsIdBody, id: number, options?: any) {
        return ProductsApiFp(this.configuration).updateTheSpecifiedResourceInStorage(body, id, options)(this.fetch, this.basePath);
    }

}
