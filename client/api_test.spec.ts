/**
 * Products API
 * This is a sample API for a products catalog.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthenticationApi", () => {
  let instance: api.AuthenticationApi
  beforeEach(function() {
    instance = new api.AuthenticationApi(config)
  });

  test("loginTheUser", () => {
    const body: api.ApiLoginBody = undefined
    return expect(instance.loginTheUser(body, {})).resolves.toBe(null)
  })
  test("logoutTheUser", () => {
    return expect(instance.logoutTheUser({})).resolves.toBe(null)
  })
  test("registerAUser", () => {
    const body: api.ApiRegisterBody = undefined
    return expect(instance.registerAUser(body, {})).resolves.toBe(null)
  })
})

describe("EndpointsApi", () => {
  let instance: api.EndpointsApi
  beforeEach(function() {
    instance = new api.EndpointsApi(config)
  });

  test("getApiUser", () => {
    return expect(instance.getApiUser({})).resolves.toBe(null)
  })
})

describe("HealthChecksApi", () => {
  let instance: api.HealthChecksApi
  beforeEach(function() {
    instance = new api.HealthChecksApi(config)
  });

  test("getApiHealthCheck", () => {
    return expect(instance.getApiHealthCheck({})).resolves.toBe(null)
  })
})

describe("ProductsApi", () => {
  let instance: api.ProductsApi
  beforeEach(function() {
    instance = new api.ProductsApi(config)
  });

  test("displayAListingOfTheResource", () => {
    return expect(instance.displayAListingOfTheResource({})).resolves.toBe(null)
  })
  test("displayTheSpecifiedResource", () => {
    const id: number = 56
    return expect(instance.displayTheSpecifiedResource(id, {})).resolves.toBe(null)
  })
  test("removeTheSpecifiedResourceFromStorage", () => {
    const id: number = 56
    return expect(instance.removeTheSpecifiedResourceFromStorage(id, {})).resolves.toBe(null)
  })
  test("storeANewlyCreatedResourceInStorage", () => {
    const name: string = "name_example"
    const description: string = "description_example"
    const price: string = "price_example"
    const isActive: boolean = true
    const coverImage: Blob = "coverImage_example"
    return expect(instance.storeANewlyCreatedResourceInStorage(name, description, price, isActive, coverImage, {})).resolves.toBe(null)
  })
  test("updateTheSpecifiedResourceInStorage", () => {
    const body: api.ProductsIdBody = undefined
    const id: number = 56
    return expect(instance.updateTheSpecifiedResourceInStorage(body, id, {})).resolves.toBe(null)
  })
})

